// Kedi

mdp

// constants

const int init_s;
const int init_i;

const double rrfdist;
const double llfdist;
const double bbdist;
const double vv;

const double rfdist_threshold = 6;
const double lfdist_threshold = -1;
const double bdist_threshold = 6;
const double st = 1;

//formula rrrfdist = rfdist - round(v/st);

module actions
	i : [1..3] init init_i; // 1- Right Lane, 2- Mid Lane, 3- Left Lane
	//lfdist : [-500..500] init round(llfdist/1.5);
	//bdist : [-500..500] init round(bbdist/1.5);            & (round(v/st) != 0)
	v : [-10..10] init round(vv/1.5);

	[fr] (i = 1)  -> (i' = 1);

	[f] (i = 1) & (i = 3) -> (v' = v + 1);
	//[f] (i = 1) -> (i' = 1);
	//[f] (i = 3) -> (i' = 3);

	//[s] (i = 1) & (i = 3) -> (v' = v + 1);
	[s] (i = 1) -> (i' = 1);
	[s] (i = 3) -> (i' = 3);

	[so] (i = 1) -> (i' = 2);
	[so] (i = 2) -> (i' = 3);

	[si] (i = 3) -> (i' = 2);
	[si] (i = 2) -> (i' = 1);
endmodule


module calculator
	rf_check : bool init false; // 1 -> caution, 0 -> safe
	lf_check : bool init false; // 1 -> caution, 0 -> safe
	b_check : bool init false; // 1 -> caution, 0 -> safe

	[] rrfdist <= rfdist_threshold -> 1:(rf_check' = true);
	//[] lfdist <= lfdist_threshold -> 1:(lf_check' = 1);
	//[] (bdist <= bdist_threshold) & (bbdist <= 8) -> 1:(b_check' = 1);

	[] rrfdist > rfdist_threshold -> 1:(rf_check' = false);
	//[] lfdist > lfdist_threshold -> 1:(lf_check' = 0);
	//[] (bdist > bdist_threshold) & (bbdist <= 8) -> 1:(b_check' = 0);

endmodule


module mdp_model
	p1: [0..24] init init_s; // 24 -> Termination due to emg

	[fr] (p1 = 0) & (i = 1) -> 0.6:(p1' = 0) + 0.4:(p1' = 2);
	[f] (p1 = 0) & (i = 1) -> 0.2:(p1' = 2) + 0.8:(p1' = 4);

	[fr] (p1 = 1) & (i = 1) -> 1:(p1' = 0);

	[fr] (p1 = 2) & (i = 1) -> 1:(p1' = 0);

	[fr] (p1 = 3) & (i = 1) -> 0.8:(p1' = 1) + 0.2:(p1' = 2);

	[so] (p1 = 4) & (i = 1) -> 0.2:(p1' = 8) + 0.8:(p1' = 12);
	//[em1] (p1 = 4) & (i = 1) -> 1:(p1' = 24);

	[s] (p1 = 5) & (i = 1) -> 1:(p1' = 4);
	//[em3] (p1 = 5) & (i = 1) -> 1:(p1' = 24);

	[s] (p1 = 6) & (i = 1) -> 1:(p1' = 6);
	//[em1] (p1 = 6) & (i = 1) -> 1:(p1' = 24);

	[s] (p1 = 7) & (i = 1) -> 1:(p1' = 7);
	//[em3] (p1 = 7) & (i = 1) -> 1:(p1' = 24);

	[si] (p1 = 8) & (i = 2) -> 1:(p1' = 0);
	[fr] (p1 = 8) & (i = 2) -> 1:(p1' = 10);

	[so] (p1 = 9) & (i = 2) -> 0.5:(p1' = 16) + 0.5:(p1' = 17);
	//[em2] (p1 = 9) & (i = 2) -> 1:(p1' = 24);

	[si] (p1 = 10) & (i = 2) -> 1:(p1' = 2);
	[fr] (p1 = 10) & (i = 2) -> 1:(p1' = 11);
	//[em3] (p1 = 10) & (i = 2) -> 1:(p1' = 24);

	[si] (p1 = 11) & (i = 2) -> 1:(p1' = 3);
	//[em3] (p1 = 11) & (i = 2) -> 1:(p1' = 24);

	[so] (p1 = 12) & (i = 2) -> 0.8:(p1' = 16) + 0.2:(p1' = 20);
	//[em2] (p1 = 12) & (i = 2) -> 1:(p1' = 24);

	[so] (p1 = 13) & (i = 2) -> 1:(p1' = 21);
	//[em2] (p1 = 13) & (i = 2) -> 1:(p1' = 24);

	[si] (p1 = 14) & (i = 2) -> 1:(p1' = 6);
	//[em3] (p1 = 14) & (i = 2) -> 1:(p1' = 24);

	//[em2] (p1 = 15) & (i = 2) -> 1:(p1' = 24);

	[si] (p1 = 16) & (i = 3) -> 0.9:(p1' = 8) + 0.1:(p1' = 10);

	[f] (p1 = 17) & (i = 3) -> 0.95:(p1' = 16) + 0.05:(p1' = 17);
	//[em2] (p1 = 17) & (i = 1) -> 1:(p1' = 24);

	[si] (p1 = 18) & (i = 3) -> 0.95:(p1' = 8) + 0.05:(p1' = 11);
	//[em2] (p1 = 18) & (i = 3) -> 1:(p1' = 24);

	[s] (p1 = 19) & (i = 3) -> 1:(p1' = 18);
	[si] (p1 = 19) & (i = 3) -> 1:(p1' = 11);
	//[em2] (p1 = 19) & (i = 3) -> 1:(p1' = 24);

	[f] (p1 = 20) & (i = 3) -> 0.8:(p1' = 17) + 0.2:(p1' = 20);

	[f] (p1 = 21) & (i = 3) -> 1:(p1' = 20);

	[si] (p1 = 22) & (i = 3) -> 1:(p1' = 14);
	//[em2] (p1 = 22) & (i = 3) -> 1:(p1' = 24);

	//[em2] (p1 = 23) & (i = 3) -> 1:(p1' = 24);

endmodule


rewards "times" // Bir sola gecis 140 goto:spec.pctl: <150
	[fr]  true  : 100;
	[f]   true  : 50;
	[s]   true  : 130; //500
	[si]  true  : 20;
	[so]  true  : 20;
	//[em1] true  : 1000;
	//[em2] true  : 1000;
	//[em3] true  : 1000;
endrewards
rewards "times_old"
	[fr] (p1 = 0)  : 10;
	[f]  (p1 = 0)  : 5;
	[fr] (p1 = 1)  : 10;
	[fr] (p1 = 2)  : 10;
	[fr] (p1 = 3)  : 10;
	[so] (p1 = 3)  : 3;
	[fr] (p1 = 4)  : 10;
	[fr] (p1 = 5)  : 10;
	[si] (p1 = 6)  : 3;
	[so] (p1 = 7)  : 3;
	[so] (p1 = 8)  : 3;
	[si] (p1 = 9)  : 3;
	[f]  (p1 = 10) : 5;
	[f]  (p1 = 11) : 5;
endrewards

rewards "rews"
	[fr] (p1 = 0): 10;
	[f] (p1 = 0)  : 30;

	[fr] (p1 = 1)  : 5;
	[fr] (p1 = 2)  : 5;
	[fr] (p1 = 3)  : 1;
	[so] (p1 = 4)  : 150;
	[s] (p1 = 5)  : 1;
	[s] (p1 = 6)  : 150;
	[s] (p1 = 7)  : 5;

	[si] (p1 = 8)  : 170;
	[fr] (p1 = 8)  : 1;

	[so] (p1 = 9)  : 1;

	[fr] (p1 = 10)  : 1;
	[si] (p1 = 10)  : 1;

	[si] (p1 = 11)  : 1;
	[so] (p1 = 12)  : 1;
	[so] (p1 = 13)  : 50;
	[si] (p1 = 14)  : 170; //1
	[si] (p1 = 16)  : 1;
	[f] (p1 = 17)  : 30;
	[si] (p1 = 18)  : 1;
	[s] (p1 = 19)  : 5;
	[f] (p1 = 20)  : 30;
	[f] (p1 = 21)  : 30;
	[si] (p1 = 22) : 1;
endrewards


// labels
label "On_Right_Lane_and_FV_Far" = (p1 = 0);
label "On_Right_Lane_and_FV_Close" = (p1 = 3) ;
label "Emergency" = (p1 = 24);
