// Kedi

mdp

// constants

const int init_s;

const double rrfdist;
const double llfdist;
const double bbdist;
const double vv;

const double rfdist_threshold = 6;
const double lfdist_threshold = -1;
const double bdist_threshold = 6;
const double st = 1;

//formula rrrfdist = rfdist - round(v/st);

module actions
	i : [1..3] init 1; // 1- Right Lane, 2- Mid Lane, 3- Left Lane
	//lfdist : [-500..500] init round(llfdist/1.5);
	//bdist : [-500..500] init round(bbdist/1.5);            & (round(v/st) != 0)
	v : [-10..10] init round(vv/1.5);

	[fr] (i = 1)  -> (i' = 1);	

	[f] ((i = 1) & (i = 3)) -> (v' = v+1);

	[s] ((i = 1) & (i = 3)) -> (v' = v-1); 

	[so] (i = 1) -> (i' = 2); 
	[so] (i = 2) -> (i' = 3);

	[si] (i = 3) -> (i' = 2); 
	[si] (i = 2) -> (i' = 1); 
endmodule


module calculator
	rf_check : bool init false; // 1 -> caution, 0 -> safe
	lf_check : bool init false; // 1 -> caution, 0 -> safe
	b_check : bool init false; // 1 -> caution, 0 -> safe

	[] rrfdist <= rfdist_threshold -> 1:(rf_check' = true);
	//[] lfdist <= lfdist_threshold -> 1:(lf_check' = 1);
	//[] (bdist <= bdist_threshold) & (bbdist <= 8) -> 1:(b_check' = 1);

	[] rrfdist > rfdist_threshold -> 1:(rf_check' = false);
	//[] lfdist > lfdist_threshold -> 1:(lf_check' = 0);
	//[] (bdist > bdist_threshold) & (bbdist <= 8) -> 1:(b_check' = 0);

endmodule


module mdp_model
	p1: [0..11] init init_s;

	[fr] (p1 = 0) & (i = 1) ->  0.25:(p1' = 2) + 0.75:(p1' = 0);
	[f]  (p1 = 0) & (i = 1) ->  0.75:(p1' = 0) + 0.25:(p1' = 3);
	
	[fr] (p1 = 1) & (i = 1) -> 1:(p1' = 0);

	[fr] (p1 = 2) & (i = 1) -> 1:(p1' = 1);

	[fr] (p1 = 3) -> 0.3:(p1' = 0) + 0.7:(p1' = 5);
	[so] (p1 = 3) -> 0.2:(p1' = 6) + 0.8:(p1' = 8);

	[fr] (p1 = 4) & (i = 1) -> 1:(p1' = 3);

	[fr] (p1 = 5) & (i = 1) -> 1:(p1' = 4);	

	[f] (p1 = 10) & (i = 3) -> 0.5:(p1' = 10) + 0.5:(p1' = 9);
	[f] (p1 = 11) & (i = 3) -> 0.5:(p1' = 11) + 0.5:(p1' = 10);	

	[so] (p1 = 7) & (i = 2) -> 0.6:(p1' = 10) + 0.4:(p1' = 9);
	[so] (p1 = 8) & (i = 2) -> 0.8:(p1' = 11) + 0.2:(p1' = 9);
	[si] (p1 = 6) & (i = 2) -> 1:(p1' = 0);
	[si] (p1 = 9) & (i = 3) -> 0.8:(p1' = 6) + 0.2:(p1' = 7);
endmodule


rewards "times"
	[fr] (p1 = 0)  : 10;
	[f]  (p1 = 0)  : 5;
	[fr] (p1 = 1)  : 10;
	[fr] (p1 = 2)  : 10;
	[fr] (p1 = 3)  : 10;
	[so] (p1 = 3)  : 3;
	[fr] (p1 = 4)  : 10;
	[fr] (p1 = 5)  : 10;
	[si] (p1 = 6)  : 3;
	[so] (p1 = 7)  : 3;
	[so] (p1 = 8)  : 3;
	[si] (p1 = 9)  : 3;
	[f]  (p1 = 10) : 5;
	[f]  (p1 = 11) : 5;
endrewards

rewards "rews"
	[fr] (p1 = 0): 10;
	[f] (p1 = 0)  : 9;
	[fr] (p1 = 1)  : 8;
	[fr] (p1 = 2)  : 7;
	[fr] (p1 = 3)  : 1;
	[so] (p1 = 3)  : 150;
	[fr] (p1 = 4)  : 1;
	[fr] (p1 = 5)  : 1;
	[si] (p1 = 6)  : 5;
	[so] (p1 = 7)  : 5;
	[so] (p1 = 8)  : 50;
	[si] (p1 = 9)  : 50;
	[f] (p1 = 10)  : 1;
	[f] (p1 = 11)  : 1;
endrewards

// labels
label "On_Right_Lane_and_FV_Far" = (p1 = 0); 
label "On_Right_Lane_and_FV_Close" = (p1 = 3) ; 

	
